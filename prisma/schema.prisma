// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id  Int @id @default(autoincrement())
  roleId Int
  fname String
  lname String
  email String @unique
  password String
  location String?
  jobType String?
  profileDescription String
  hourlyRate Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVerified Boolean? @default(false)
  
  role Role @relation(fields: [roleId], references: [id])
  emailVerifications EmailVerifications[]
  forgetPassword     ForgetPassword[]
  profilePics ProfilePics[]

}
model Role {
  id        Int      @id @default(autoincrement())
  name      RoleName @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]
}

model EmailVerifications {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model ForgetPassword {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otp       String
  isRequested Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model ProfilePics{
  id Int @id @default(autoincrement())
  userId Int
  url String

  user User @relation(fields: [userId], references: [id])
}

enum RoleName {
  RECRUITER
  EMPLOYEE
}
model Rating{
  id Int @id @default(autoincrement())
  employerId Int
  employeeId Int
  rating Float
  review String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model chathistory{
  id Int @id @default(autoincrement())
  employerId Int
  employeeId Int
  message String
  isEdited Boolean @default(false)
  isDeleted Boolean @default(false)
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
